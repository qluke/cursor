---
description: Guidelines for translating documentation using Fumadocs, focusing on Markdown, MDX, and UI component conventions.
globs: 
alwaysApply: true
---
# Fumadocs Translation Guide

This document provides **clear rules for translating documentation** using Fumadocs, ensuring formatting, structure, and component usage remain correct and consistent.

Reference: [fumadocs-markdown.mdx](mdc:script/fumadocs-markdown.mdx)

---

## Markdown & MDX Syntax

When translating documentation, **always preserve the following**:

- **Frontmatter**  
  - **Keep all keys unchanged** (e.g. `title`, `description`, etc.)  
  - **Translate only values**.
- **MDX Components**  
  - **Do not rename or alter component tags** (`<Cards>`, `<Callout>`, etc.).  
  - **Only translate text content or props that are meant to be visible** (e.g. `title`, `description`, `alt`).
- **Codeblocks**  
  - **Never translate code inside triple backticks** (```) **unless there are inline comments**.  
  - **Translate comments if present and visible**.
- **Links**  
  - **Preserve all link URLs and structure**.  
  - **Translate the link text** only.
- **Images**  
  - **Do not change image paths**.  
  - **Translate only the alt text**.

---

### Cards

**Recommended usage:**  
For displaying related links, feature highlights, navigation, grouped information, etc. Common on homepages or overview pages.

---

### Callout

**Recommended usage:**  
For tips, important notes, warnings, or errors. Use for operational advice, risks, or emphasizing critical content.

---

## Page & Folder Conventions

When translating or creating page-related files:

- **Meta Files:**  
  - Translate values in `meta.json` (such as `title`, `description`).
  - **Do not change keys or the structure.**
- **Folder Structure:**  
  - Keep folder and file names unchanged to preserve routing and slugs.
- **Slugs:**  
  - Do not alter file or folder names that determine page slugs.
- **Root Folders:**  
  - Maintain root folder designations and their properties in meta files.

Reference: [fumadocs-page-conventions.mdx](mdc:script/fumadocs-page-conventions.mdx)

---

## Translation Workflow

1. **Copy and translate source `.mdx` files** using the same filenames and structure.
2. **Translate visible content** but preserve all MDX and Markdown syntax.
3. **Retain all component props and attributes** so components function as intended.
4. **Translate frontmatter values only**, leaving keys unchanged.
5. **Translate table content** but keep table structure intact.

---

 
## Additional Components

When translating documents that use the following components, follow these specific guidelines:

---

### Accordion

To use the Accordion component, import both `Accordion` and `Accordions` from `fumadocs-ui/components/accordion`.  
Wrap your `<Accordion>` items within an `<Accordions>` container.

**Example:**
```mdx
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';

<Accordions type="single">
  <Accordion title="Translated Title">
    Translated content here
  </Accordion>
</Accordions>
```

- Use the `title` prop for the header text.
- The content goes inside the `<Accordion>` tag.
- To enable deep-linking (auto-opening via URL hash), add an `id` prop:
  ```mdx
  <Accordion title="Translated Title" id="section-id">
    Translated content here
  </Accordion>
  ```
- By default, the Accordion value is the `title`. If `id` is set, it will be used instead.

**Recommended for:** FAQs, grouped information, or expandable sections in documentation.

---

### Files

To show a file structure, use the `Files`, `Folder`, and `File` components from `fumadocs-ui/components/files`.

**Example:**
```mdx
import { File, Folder, Files } from 'fumadocs-ui/components/files';

<Files>
  <Folder name="Translated Folder Name" defaultOpen>
    <File name="Translated File Name" />
  </Folder>
</Files>
```

- Use the `name` prop to provide the translated folder or file name.
- Use `defaultOpen` to expand a folder by default.
- Nest `<Folder>` and `<File>` as needed.

---

### GitHub Info

To display GitHub repository information, use the `GithubInfo` component from `fumadocs-ui/components/github-info`.

**Example:**
```mdx
import { GithubInfo } from 'fumadocs-ui/components/github-info';

<GithubInfo
  owner="username"
  repo="repo-name"
  // token is optional, for authenticated requests
  token={process.env.GITHUB_TOKEN}
/>
```

- Recommended: Add to your docs layout via the `links` option.

---

### Image Zoom

To enable zoom-in on images, replace the default image component with `ImageZoom`.

**Example (MDX usage):**
```mdx
<ImageZoom 
  src="/path/to/image.png" 
  alt="Translated alt text"
  width={500}
  height={300}
/>
```

**Example (global MDX integration):**
```tsx
import { ImageZoom } from 'fumadocs-ui/components/image-zoom';
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    img: (props) => <ImageZoom {...(props as any)} />,
    ...components,
  };
}
```

- All images will be zoomable after this replacement.
- Next.js `<Image />` will have a default `sizes` prop if not specified.

---

### Inline TOC

To add an inline Table of Contents, use the `InlineTOC` component and pass TOC items.

**Example:**
```mdx
import { InlineTOC } from 'fumadocs-ui/components/inline-toc';

<InlineTOC items={toc} />
```

- For use within a page:
  ```tsx
  <DocsPage>
    ...
    <InlineTOC items={toc} />
    ...
  </DocsPage>
  ```

---

### Steps

To show sequential steps, wrap `Step` components inside a `Steps` container.

**Example:**
```mdx
import { Step, Steps } from 'fumadocs-ui/components/steps';

<Steps>
  <Step>
    ### Translated Step 1
    Translated content for step 1
  </Step>
  <Step>
    ### Translated Step 2
    Translated content for step 2
  </Step>
</Steps>
```

- You can use Tailwind CSS classes for custom step visuals:
  ```mdx
  <div className="fd-steps">
    <div className="fd-step" />
  </div>
  ```
- To style only specific headings as steps:
  ```mdx
  <div className='fd-steps [&_h3]:fd-step'>
    ### Translated Heading
  </div>
  ```

---

### Tabs

To use tabbed content, import `Tab` and `Tabs` from `fumadocs-ui/components/tabs`.

**Example:**
```mdx
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

<Tabs items={['Translated Tab 1', 'Translated Tab 2']}>
  <Tab>
    Translated content for tab 1
  </Tab>
  <Tab>
    Translated content for tab 2
  </Tab>
</Tabs>
```

- Translate tab labels and content.
- Assign `value` to each `<Tab>`, or omit for index-based selection.
- Use `groupId` to sync tab selection across groups.
- Use `persist` to store selection in `localStorage`.
- Set `defaultIndex` for default active tab.
- Use `id` on `<Tab>` for URL hash linking.
- `updateAnchor` updates the URL hash when a tab is selected.

---

> **Note:**  
> Always translate visible text inside components:  
> `title`, tab labels, folder/file names, alt text, and inner content.  
> **Never change component names, logic, or structure.**  
> Your translation must keep the documentation fully functional, accessible, and localized.
 
 