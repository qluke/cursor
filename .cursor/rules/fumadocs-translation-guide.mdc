---
description: 
globs: 
alwaysApply: true
---
# Fumadocs Translation Guide

This rule provides guidelines for translating Fumadocs documentation while maintaining proper formatting and conventions.

## Markdown Syntax

When translating Fumadocs documentation, preserve all of the following elements:

- **Frontmatter**: Keep all frontmatter properties (`title`, `description`, etc.) but translate their values
- **MDX Components**: Don't modify component names like `<Cards>`, `<Callout>`, etc.
- **Codeblocks**: Do not translate code inside triple backticks unless they contain comments
- **Links**: Preserve all link structures while translating the link text
- **Images**: Keep image references intact, only translate alt text

Reference: [fumadocs-markdown.mdx](mdc:script/fumadocs-markdown.mdx)

## Page Conventions

When translating page-related files, follow these guidelines:

- **Meta Files**: Translate values in `meta.json` files but preserve all keys and special syntax
- **Folder Structure**: Maintain the folder structure and naming as in the original documentation
- **Slugs**: Don't modify file paths that affect page slugs
- **Root Folders**: Maintain root folder designations and their properties

Reference: [fumadocs-page-conventions.mdx](mdc:script/fumadocs-page-conventions.mdx)

## Translation Workflow

1. Create translated versions of `.mdx` files with the same filename structure
2. Translate content while preserving all Markdown and MDX syntax
3. Ensure all component props and attributes remain functional
4. Translate frontmatter values but keep all original frontmatter keys
5. Translate text in tables but maintain table structure


## Additional Components

When translating documents that use the following components, follow these specific guidelines:

---

### Accordion

To use the Accordion component, import both `Accordion` and `Accordions` from `fumadocs-ui/components/accordion`.  
Wrap your `<Accordion>` items within an `<Accordions>` container.

**Example:**
```mdx
import { Accordion, Accordions } from 'fumadocs-ui/components/accordion';

<Accordions type="single">
  <Accordion title="Translated Title">
    Translated content here
  </Accordion>
</Accordions>
```

- Use the `title` prop for the header text.
- The content goes inside the `<Accordion>` tag.
- To enable deep-linking (auto-opening via URL hash), add an `id` prop:
  ```mdx
  <Accordion title="Translated Title" id="section-id">
    Translated content here
  </Accordion>
  ```
- By default, the Accordion value is the `title`. If `id` is set, it will be used instead.

**Recommended for:** FAQs, grouped information, or expandable sections in documentation.

---

### Files

To show a file structure, use the `Files`, `Folder`, and `File` components from `fumadocs-ui/components/files`.

**Example:**
```mdx
import { File, Folder, Files } from 'fumadocs-ui/components/files';

<Files>
  <Folder name="Translated Folder Name" defaultOpen>
    <File name="Translated File Name" />
  </Folder>
</Files>
```

- Use the `name` prop to provide the translated folder or file name.
- Use `defaultOpen` to expand a folder by default.
- Nest `<Folder>` and `<File>` as needed.

---

### GitHub Info

To display GitHub repository information, use the `GithubInfo` component from `fumadocs-ui/components/github-info`.

**Example:**
```mdx
import { GithubInfo } from 'fumadocs-ui/components/github-info';

<GithubInfo
  owner="username"
  repo="repo-name"
  // token is optional, for authenticated requests
  token={process.env.GITHUB_TOKEN}
/>
```

- Recommended: Add to your docs layout via the `links` option.

---

### Image Zoom

To enable zoom-in on images, replace the default image component with `ImageZoom`.

**Example (MDX usage):**
```mdx
<ImageZoom 
  src="/path/to/image.png" 
  alt="Translated alt text"
  width={500}
  height={300}
/>
```

**Example (global MDX integration):**
```tsx
import { ImageZoom } from 'fumadocs-ui/components/image-zoom';
import defaultComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';

export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    img: (props) => <ImageZoom {...(props as any)} />,
    ...components,
  };
}
```

- All images will be zoomable after this replacement.
- Next.js `<Image />` will have a default `sizes` prop if not specified.

---

### Inline TOC

To add an inline Table of Contents, use the `InlineTOC` component and pass TOC items.

**Example:**
```mdx
import { InlineTOC } from 'fumadocs-ui/components/inline-toc';

<InlineTOC items={toc} />
```

- For use within a page:
  ```tsx
  <DocsPage>
    ...
    <InlineTOC items={toc} />
    ...
  </DocsPage>
  ```

---

### Steps

To show sequential steps, wrap `Step` components inside a `Steps` container.

**Example:**
```mdx
import { Step, Steps } from 'fumadocs-ui/components/steps';

<Steps>
  <Step>
    ### Translated Step 1
    Translated content for step 1
  </Step>
  <Step>
    ### Translated Step 2
    Translated content for step 2
  </Step>
</Steps>
```

- You can use Tailwind CSS classes for custom step visuals:
  ```mdx
  <div className="fd-steps">
    <div className="fd-step" />
  </div>
  ```
- To style only specific headings as steps:
  ```mdx
  <div className='fd-steps [&_h3]:fd-step'>
    ### Translated Heading
  </div>
  ```

---

### Tabs

To use tabbed content, import `Tab` and `Tabs` from `fumadocs-ui/components/tabs`.

**Example:**
```mdx
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

<Tabs items={['Translated Tab 1', 'Translated Tab 2']}>
  <Tab>
    Translated content for tab 1
  </Tab>
  <Tab>
    Translated content for tab 2
  </Tab>
</Tabs>
```

- Assign `value` to each `<Tab>` or omit for index-based detection.
- Use `groupId` to share value across multiple Tabs.
- Enable `persist` to save the selected tab in `localStorage`.
- Set `defaultIndex` to choose the default active tab.
- Use `id` on `<Tab>` for URL hash linking (e.g., `#tab-cpp`).
- `updateAnchor` on `<Tabs>` updates the URL hash when a new tab is selected.

**Advanced:**
You may use Radix UI primitives directly if needed.

---

> **Note:** Always translate visible text, such as `title`, tab labels, folder/file names, alt text, and content within the components.  
> Preserve component structure and logic while making documentation accessible and localized.

---




